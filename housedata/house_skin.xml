<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.19">

    
  <!-- Spot Style - Default Point Spot Style -->
  <style name="IconDefaultPointSpotStyle"
         url="%FIRSTXML%/spots/nopacew_sequence_user_defaultpoint0.png"
         visible="false"
         frame="0"
         lastframe="15"
         framewidth="120"
         frameheight="120"
         stopspotsequence="false"
         crop="0|0|120|120"
         onloaded="startspotanimation(0.1);"
         onhover="onhoverIconDefaultPointSpotStyle"
         onout="onoutIconDefaultPointSpotStyle"

         height="40"
         width="40"
         />

  <action name="onhoverIconDefaultPointSpotStyle">
    showtooltip('hotspot');
  </action>


  <action name="onoutIconDefaultPointSpotStyle">
    hideTooltip();



  </action>



  <!-- unsupported kind of display : PointMap -->


        
  <!-- Video Spot Style - Default Video Spot Style -->
  <style name="RectVideoDefaultVideoSpotStyleLoader" url="%FIRSTXML%/spots/loadanimation.png" crop="0|0|64|64" ypos="0" frame="0" distorted="true" visible="false" />
  <style name="RectVideoDefaultVideoSpotStyle"
         capture="false"
         visible="false"
         distorted="true"
         scale="1.0"
         url="%SWFPATH%/graphics/videoplayer.swf"
         alturl="%FIRSTXML%/graphics/videoplayer.js"
         loop="true"
         autoresume="true"
         pausedonstart="true"
         pausedonstart.android="false"
         pauseothersounds="true"
         canstart="false"
         onhover="onhoverRectVideoDefaultVideoSpotStyle"
         onout="onoutRectVideoDefaultVideoSpotStyle"
         onvideoready="onvideoreadyRectVideoDefaultVideoSpotStyle"
         />
  <style name="RectVideoDefaultVideoSpotStyle" 
    directionalsound="true" 
    range="90" 
    devices="flash" 
  />
  <style name="RectVideoDefaultVideoSpotStyle" 
    directionalsound="false" 
    devices="html5" 
  />
  <style name="RectVideoDefaultVideoSpotStyle" stateVideo="startplaying" devices="no-ios"/>
  <style name="RectVideoDefaultVideoSpotStyle" stateVideo="startpaused"  devices="ios"   />
  <style name="RectVideoDefaultVideoSpotStyle" stateVideo="startplaying" devices="ios10" />
  <action name="onhoverRectVideoDefaultVideoSpotStyle">
    showTooltip('hotspot');
    if(hotspot[get(videocontrolpause)].visible == false,
      if(hotspot[get(videocontrolplay)].visible == false,
        set(hotspot[get(videocontrolpause)].visible, true);
      );
    );
  </action>
  <action name="onoutRectVideoDefaultVideoSpotStyle">
    hideTooltip();
    ifnot(ispaused,
      if(hotspot[get(videocontrolpause)].visible,
        set(hotspot[get(videocontrolpause)].visible, false);
      );
    );
  </action>
  <action name="onvideoreadyRectVideoDefaultVideoSpotStyle">
    set(isVideoReadyForPlaying, false);
    if (isvideoready,
      if(panovideospotsstate,set(canstart, true););
      if (canstart,
        set(isVideoReadyForPlaying, true);
      );
    );
    if(isVideoReadyForPlaying,
    ifnot(device.ios,
      inc(videospots_playing);
      pauseTourSoundsActions(true,true,true,true,true);
    );

    if(tour_displayspots,
      if(ispaused,
        if(stateVideo == "startplaying",
          set(stateVideo, "playing");
          play();
        );
      );
    );
    if(device.flash OR (device.webgl AND !device.ios),
      if (tour_soundson,
        div(volume, tour_soundsvolume, 100);
      ,
        set(volume, 0);
      );
    ,
      ifnot(device.ios,
        if (tour_soundson,
          js(kpanotour.Sounds.startVideosSounds(get(volume)));
        ,
          js(kpanotour.Sounds.stopVideosSounds());
        );
      ,
        if (tour_soundson,
          set(muted, false);
        ,
          set(muted, true);
        );
      );
    );
    onvideoreadyspecific();
    onvideoreadycontrols();
    ,

      delayedcall(0.5,onvideoreadyRectVideoDefaultVideoSpotStyle());
    );
  </action>
  <action name="animatevideospotloaderRectVideoDefaultVideoSpotStyle">
    if(hotspot[%1],
      if(hotspot[%1].activated,
        set(hotspot[%1].visible, true);
      );
      inc(hotspot[%1].frame,1, 11,0);
      mul(hotspot[%1].ypos, hotspot[%1].frame, 64);
      txtadd(hotspot[%1].crop, '0|', get(hotspot[%1].ypos),'|64|64');
      delayedcall(%2, 0.1, animatevideospotloaderRectVideoDefaultVideoSpotStyle(%1, %2) );
    ,
      stopdelayedcall(%2);
    );
  </action>
  <action name="stopvideospotloaderanimationRectVideoDefaultVideoSpotStyle">
    removehotspot(%1);
  </action>



      
  <!-- Picture Spot Style - Default Picture Spot Style 1 -->

  <style name="RectPictureDefaultPictureSpotStyle1"
         distorted="true"
         visible="false"
         scale="1.0" 
         onhover="onhoverRectPictureDefaultPictureSpotStyle1"
         onout="onoutRectPictureDefaultPictureSpotStyle1"
         />
  <action name="onhoverRectPictureDefaultPictureSpotStyle1">
    showTooltip('hotspot');
  </action>
  <action name="onoutRectPictureDefaultPictureSpotStyle1">
    hideTooltip();
    
  </action>



      
  <!-- Picture Spot Style - MAP4 -->

  <style name="RectPictureMAP4"
         distorted="true"
         visible="false"
         scale="1.0" 
         onhover="onhoverRectPictureMAP4"
         onout="onoutRectPictureMAP4"
         />
  <action name="onhoverRectPictureMAP4">
    showTooltip('hotspot');
  </action>
  <action name="onoutRectPictureMAP4">
    hideTooltip();
    
  </action>



    
  <!-- Spot Style - Default Point Spot Style 3 -->
  <style name="IconDefaultPointSpotStyle3"
         url="%FIRSTXML%/spots/hotspot_plan_sequence_user_defaultpoint3.png"
         visible="false"
         frame="0"
         lastframe="9"
         framewidth="67"
         frameheight="67"
         stopspotsequence="false"
         crop="0|0|67|67"
         onloaded="startspotanimation(0.1);"
         onhover="onhoverIconDefaultPointSpotStyle3"
         onout="onoutIconDefaultPointSpotStyle3"

         height="30"
         width="30"
         />

  <action name="onhoverIconDefaultPointSpotStyle3">
    showtooltip('hotspot');
  </action>


  <action name="onoutIconDefaultPointSpotStyle3">
    hideTooltip();



  </action>



      
  <!-- Picture Spot Style - Introduce -->

  <style name="RectPictureIntroduce"
         distorted="true"
         visible="false"
         scale="1.0" 
         onhover="onhoverRectPictureIntroduce"
         onout="onoutRectPictureIntroduce"
         />
  <action name="onhoverRectPictureIntroduce">
    showTooltip('hotspot');
  </action>
  <action name="onoutRectPictureIntroduce">
    hideTooltip();
    
  </action>



      
  <!-- Picture Spot Style - PUBLIC -->

  <style name="RectPicturePUBLIC"
         distorted="true"
         visible="false"
         scale="1.0" 
         onhover="onhoverRectPicturePUBLIC"
         onout="onoutRectPicturePUBLIC"
         />
  <action name="onhoverRectPicturePUBLIC">
    showTooltip('hotspot');
  </action>
  <action name="onoutRectPicturePUBLIC">
    hideTooltip();
    
  </action>



      
  <!-- Picture Spot Style - Default Picture Spot Style 2 -->

  <style name="RectPictureDefaultPictureSpotStyle2"
         distorted="true"
         visible="false"
         scale="1.0" 
         onhover="onhoverRectPictureDefaultPictureSpotStyle2"
         onout="onoutRectPictureDefaultPictureSpotStyle2"
         />
  <action name="onhoverRectPictureDefaultPictureSpotStyle2">
    showTooltip('hotspot');
  </action>
  <action name="onoutRectPictureDefaultPictureSpotStyle2">
    hideTooltip();
    
  </action>



<!-- ********** -->
<!-- Force Landscape on Mobile -->
<!-- id : ForceLandscapeMobilePlugin -->
<!-- ********** -->

	<events name="mobileorientation_events" devices="mobile" keep="true" onresize="mobileorientation_portrait_mode_check();"/>

	<action name="mobileorientation_portrait_mode_check" device="mobile">
		div(aspect, stagewidth, stageheight);
		if(aspect != lastaspect OR '%1' == 'true',
			copy(lastaspect, aspect);
			if(stagewidth GT stageheight,
				tween(layer[mobileorientation_rotate_device_required].alpha, 0.0, 0.0);
			,
				tween(layer[mobileorientation_rotate_device_required].alpha, 1.0);
				delayedcall(3.0, tween(layer[mobileorientation_rotate_device_required].alpha, 0.0, 1.0););
			);
		);
	</action>	

	<layer name="mobileorientation_rotate_device_required" keep="true" devices="mobile" 
		url="%FIRSTXML%/graphics/rotate_device.png" width="80%" height="prop"
		align="center" edge="center"
		autoalpha="true" alpha="0.0"
		enabled="false"
		/>	
<!-- ********** -->
<!-- Floor plan -->
<!-- id : floorPlan -->
<!-- ********** -->

	<ptplugin name="floorPlan" engine="KolorFloorPlan">
		<settings>
			<option name="background_color" value="f2f2f2" type="string" />
			<option name="background_lighter_color" value="ffffff" type="string" />
			<option name="background_darker_color" value="cacaca" type="string" />
			<option name="background_alpha" value="0" type="float" />
			<option name="text_color" value="000000" type="string" />
			<option name="resize" value="true" type="bool" />
			<option name="fp_selector" value="one" type="string" />
			<option name="fp_selector_label" value="floorPlanmenu_label" type="string" />
			<option name="display_title" value="false" type="bool" />
			<option name="title_font" value="Verdana" type="string" />
			<option name="title_size" value="14" type="int" />
			<option name="title_weight" value="normal" type="string" />
			<option name="title_decoration" value="normal" type="string" />
			<option name="title_color" value="000000" type="string" />
			<option name="display_orientation" value="true" type="bool" />
			<option name="display_radar" value="true" type="bool" />
			<option name="radar_radius" value="30" type="int" />
			<option name="radar_line_width" value="3" type="int" />
			<option name="radar_line_color" value="ffffff" type="string" />
			<option name="radar_line_alpha" value="1" type="float" />
			<option name="radar_fill_color" value="1cfff4" type="string" />
			<option name="radar_fill_alpha" value="0.90000762951094837" type="float" />
			<option name="close_on_click" value="false" type="bool" />
			<option name="position" value="bottomleft" type="string" />
			<option name="zorder" value="2" type="int" />
			<option name="use_i18n" value="true" type="bool" />
		</settings>
		
		<floorplanItems selectedItem="" selectedSpot="" selectedSpotScene="" selectedSpotHeading="" selectedSpotFov="">
			
			
							<floorplanItem 
								name="fpitempanogroup38" 
								width="500" 
								height="500" 
								groupName="panogroup38" 
								url="floorplan/foolpaln_panogroup38.png" 
								title="panogroup38_floor_title"
								heading="0">
										<spot name="spotmap72" posX="0.541921973" posY="0.676891983" heading="-177.60000000000011" desc="spotmap72_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano37" jsClick="spotmap72ActionSpotFloorPlan">
											<icon url="spots/hotspot_image_user_defaultmap0.png" iconWidth="15" iconHeight="15" iconAnchor="center" />
										</spot>
										<spot name="spotmap73" posX="0.206543997" posY="0.588957012" heading="19.200000000000557" desc="spotmap73_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano39" jsClick="spotmap73ActionSpotFloorPlan">
											<icon url="spots/hotspot_image_user_defaultmap0.png" iconWidth="15" iconHeight="15" iconAnchor="center" />
										</spot>
										<spot name="spotmap74" posX="0.779141009" posY="0.355827987" heading="1.399999999999608" desc="spotmap74_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano41" jsClick="spotmap74ActionSpotFloorPlan">
											<icon url="spots/hotspot_image_user_defaultmap0.png" iconWidth="15" iconHeight="15" iconAnchor="center" />
										</spot>
							</floorplanItem>
		</floorplanItems>
	</ptplugin>
	
	<action name="kolorFloorplanJsReady_floorPlan">
		set(ptplugin[floorPlan].jsready, true);
		
		ifnot(ptplugin[floorPlan].floorplanItems.selectedSpot == "",
			set(ptplugin[floorPlan].floorplanItems.selectedSpotFov, get(view.hfov));
			js(invokePluginFunction(floorPlan, setKolorFloorPlanSelectedSpotOptions, get(xml.scene), get(view.hlookat), get(view.hfov)));
		);
	</action>
	
	
	
					<!-- floorplan panogroup38 spots counter : 3 -->
						<action name="spotmap72ActionSpotFloorPlan">
          mainloadscene(pano37);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
						<action name="spotmap73ActionSpotFloorPlan">
          mainloadscene(pano39);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
						<action name="spotmap74ActionSpotFloorPlan">
          mainloadscene(pano41);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
	
	
	<events name="floorPlanEvents" devices="desktop|mobile"
	onxmlcomplete="ifnot(floorPlanFloorPlanLoaded,set(tour_displayfloorplan,false););floorPlanActivateDefaultSpot();" 
	onviewchanged="floorPlanOnViewChange();" 
	onhidetourfloorplan="floorPlanCloseTourFloorPlan();" 
	onshowtourfloorplan="if(tour_displayfloorplan,floorPlanOpenTourFloorPlan(););" 
	onTourStart=""
	changetourlanguage="floorPlanChangeLanguage();"
	keep="true" />
	
	<action name="floorPlanChangeLanguage">
		if(ptplugin[floorPlan].jsready,
			stopdelayedcall(delay_floorPlan);
			js(invokePluginFunction(floorPlan, changeLanguage));
			js(invokePluginFunction(floorPlanArea, changeLanguage, false));
		,
			delayedcall(delay_floorPlan, 0.1, floorPlanChangeLanguage(););
		);
	</action>
	
	
	<krpano floorPlanFloorPlanLoaded="false" />
	
	<action name="floorPlanHideTourFloorPlan">
		hideKolorArea_floorPlanArea(false);
	</action>
	
	<action name="floorPlanCloseTourFloorPlan">
		closeKolorArea_floorPlanArea();
	</action>
	
	<action name="floorPlanShowTourFloorPlan">
		if(ptplugin[floorPlanArea].isOpen === null,
			openKolorArea_floorPlanArea();
		,
			showKolorArea_floorPlanArea(false);
		);
	</action>
	
	<action name="floorPlanOpenTourFloorPlan">
		openKolorArea_floorPlanArea();
	</action>
	
	<action name="floorPlanOnViewChange">
		if (floorPlanFloorPlanLoaded == true,
			ifnot(ptplugin[floorPlan].floorplanItems.selectedSpot == "",
				ifnot(scene[get(xml.scene)].planar,
					js(invokePluginFunction(floorPlan, changeDirection, get(xml.scene), get(view.hlookat), get(view.hfov)));
				);
			);
		);
	</action>
	
	<action name="floorPlanActivateSpot">
		
		set(ptplugin[floorPlan].floorplanItems.selectedSpot, %1);
		set(ptplugin[floorPlan].floorplanItems.selectedItem, %2);
		
		if(%1 !== "",
			set(ptplugin[floorPlan].floorplanItems.selectedSpotScene, get(xml.scene));
			set(ptplugin[floorPlan].floorplanItems.selectedSpotHeading, get(view.hlookat));
			set(ptplugin[floorPlan].floorplanItems.selectedSpotFov, get(view.hfov));
		);
		
		
		if(ptplugin[floorPlanArea].isOpen,
			floorPlanSelectActivatedSpot(%1, %2, %3);
		);
	</action>
	
	<action name="floorPlanSelectActivatedSpot">
		js(invokePluginFunction(floorPlan, selectSpot, %1, %2, %3));

		if(%1 !== "",
			if(scene[get(xml.scene)].planar,
				js(invokePluginFunction(floorPlan, hideRadar));
			,
				js(invokePluginFunction(floorPlan, changeDirection, get(xml.scene), get(view.hlookat), get(view.hfov)));
			);
		);
	</action>
	
	<action name="floorPlanDeactivateSpot">
		set(ptplugin[floorPlan].floorplanItems.selectedSpot, "");
		
		js(invokePluginFunction(floorPlan, unselectSpot));
	</action>
	
	<action name="floorPlanActivateDefaultSpot">
		set(floorPlanFloorPlanLoaded, true);
		
		set(floorPlanSpotFound, "");
		set(floorPlanSpotScene, "");
		set(floorPlanItemFound, "");
		set(floorPlanItemSearch, true);
		set(floorPlanSpotSearch, true);
		set(floorPlanSpotSearchActivated, true);
		set(floorPlanSpotSearchContinue, true);
		
		
		for(set(defaultfloorplaniteminc,0), defaultfloorplaniteminc LT ptplugin[floorPlan].floorplanItems.floorplanItem.count , inc(defaultfloorplaniteminc),
                        if(floorPlanSpotSearchActivated == true,
				
				if(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].groupName == scene[get(xml.scene)].group,
					set(floorPlanItemFound, get(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].name));
					set(ptplugin[floorPlan].floorplanItems.selectedItem, get(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].name));
					set(floorPlanItemSearch, false);
					set(floorPlanSpotSearch, true);
				,
					set(floorPlanSpotSearch, false);
					
					if(floorPlanItemFound == "",
						set(floorPlanItemFound, get(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].name));
					);
				);
			);
			if(floorPlanSpotSearch == true,
                                for(set(defaultspotinc,0), defaultspotinc LT ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].spot.count , inc(defaultspotinc),
                                        if(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].isScene == true,
					
						if(floorPlanSpotSearchContinue == true,
							if(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].scene == xml.scene,
								set(floorPlanSpotFound, get(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].name));
								set(floorPlanSpotScene, get(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].scene));
								set(ptplugin[floorPlan].floorplanItems.selectedItem, get(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].name));
								if(floorPlanItemSearch == false,
									set(floorPlanSpotSearchContinue, false);
									set(floorPlanSpotSearchActivated, false);
									set(floorPlanSpotSearch, false);
								);
							);
						);
					);
					
				);
			);
		);
		
		if(floorPlanSpotFound == "",
			
			
			floorPlanDeactivateSpot();
			
			
			set(ptplugin[floorPlan].floorplanItems.selectedItem, get(floorPlanItemFound));
			
			
			ifnot(ptplugin[floorPlan].floorplanItems.selectedItem == "",
				floorPlanActivateSpot("", get(ptplugin[floorPlan].floorplanItems.selectedItem), "");
			);
		,
			
			floorPlanActivateSpot(get(floorPlanSpotFound), get(ptplugin[floorPlan].floorplanItems.selectedItem), get(floorPlanSpotScene));
		);
	</action>
	
	<action name="floorPlanChangeTitle">
		js(invokePluginFunction(floorPlan, changeTitle, %1));
	</action>
	
	<ptplugin name="floorPlanArea" engine="kolorArea">
	<settings>
		<option name="position" value="bottomleft" type="string" />
		<option name="start_position" value="left" type="string" />
		<option name="margin_x" value="40" type="int" />
		<option name="margin_y" value="40" type="int" />
		<option name="display_title" value="false" type="bool" />
		<option name="title_font" value="Verdana" type="string" />
		<option name="title_size" value="14" type="int" />
		<option name="title_weight" value="normal" type="string" />
		<option name="title_decoration" value="normal" type="string" />
		<option name="title_color" value="000000" type="string" />
		<option name="close_displayed" value="false" type="bool" />
		<option name="close_text" value="floorPlandisplay_close_text" type="string" />

		<option name="background_color" value="f2f2f2" type="string" />
		<option name="background_alpha" value="0" type="float" />
		<option name="overlay_displayed" value="false" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.50000762951094835" type="float" />

		<option name="overlay_image" value="housedata/graphics/floorplan/foolpaln.png" type="string" />

		<option name="padding" value="15" type="int" />
		<option name="topleft_radius" value="0" type="int" />
		<option name="topright_radius" value="0" type="int" />
		<option name="bottomleft_radius" value="0" type="int" />
		<option name="bottomright_radius" value="0" type="int" />
		<option name="area_border_width" value="0" type="int" />
		<option name="area_border_color" value="f2f2f2" type="string" />
		<option name="area_border_alpha" value="0" type="float" />
		<option name="area_width" value="400" type="int" />
		<option name="area_height" value="350" type="int" />
		<option name="area_width_unit" value="pixel" type="string" />
		<option name="area_height_unit" value="pixel" type="string" />
		<option name="animation" value="false" type="bool" />
		<option name="animation_duration" value="500" type="int" />
		<option name="close_on_click" value="false" type="bool" />
		<option name="refresh_content" value="false" type="bool" />
		<option name="open_callback" value="addKolorFloorPlan('floorPlan', 'floorPlanArea_floorplanDIV');" type="string" />
		<option name="close_callback" value="invokeKrFunction('closeKolorAreaCallback_floorPlanArea')" type="string" />
		<option name="zorder" value="2" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
	</ptplugin>
	
	<action name="kolorAreaJsReady_floorPlanArea">
		set(ptplugin[floorPlanArea].jsready, true);

	</action>
	
	<action name="openKolorArea_floorPlanArea">
		ifnot(ptplugin[floorPlanArea].isOpen,
			set(ptplugin[floorPlanArea].isOpen, true);
			pauseautorotation(forceplugin);

			js(showKolorArea(floorPlanArea, &lt;div id="floorPlanArea_floorplanDIV"&gt;&lt;/div&gt;));
			
			if(ptplugin[floorPlan].floorplanItems.selectedSpot != "",
				floorPlanSelectActivatedSpot(get(ptplugin[floorPlan].floorplanItems.selectedSpot), get(ptplugin[floorPlan].floorplanItems.selectedItem), get(ptplugin[floorPlan].floorplanItems.selectedSpotScene));
			);
			events.dispatch(onremovedisplayedobject);
		);
	</action>
	
	<action name="closeKolorArea_floorPlanArea">
		if(ptplugin[floorPlanArea].isOpen,
			js(invokePluginFunction(floorPlanArea, closeKolorArea));
		);
	</action>
	
	<action name="toggleKolorArea_floorPlanArea">
		if(ptplugin[floorPlanArea].isOpen,
			closeKolorArea_floorPlanArea();
		,
			openKolorArea_floorPlanArea();
		);
	</action>
	
	<action name="closeKolorAreaCallback_floorPlanArea">
		if(ptplugin[floorPlanArea].isOpen,resumeautorotation(forceplugin);

			
		);
		set(ptplugin[floorPlanArea].isOpen, false);hideFloorplan();

	</action>
	
	<action name="changeTitleKolorArea_floorPlanArea">
		js(invokePluginFunction(floorPlanArea, changeTitle, %1));
	</action>
	
	<action name="showKolorArea_floorPlanArea">
		set(ptplugin[floorPlanArea].isOpen, true);
		pauseautorotation(forceplugin);

		js(invokePluginFunction(floorPlanArea, showKolorArea, %1));
		events.dispatch(onremovedisplayedobject);
	</action>
		
	<action name="hideKolorArea_floorPlanArea">
		resumeautorotation(forceplugin);

		
		set(ptplugin[floorPlanArea].isOpen, false);
		js(invokePluginFunction(floorPlanArea, hideKolorArea, %1));
	</action>
	
	<events name="kolorAreaEvents_floorPlanArea" devices="desktop|mobile" 
		keep="true"
		hidetourcontrols="if(ptplugin[floorPlanArea].isOpen,set(restore_floorPlanArea, true);hideKolorArea_floorPlanArea(false);,set(restore_floorPlanArea, false););"
		showtourcontrols="if(tour_displayfloorplan,if(restore_floorPlanArea,showKolorArea_floorPlanArea(false);););"
	/>
	

<!-- ********** -->
<!-- Gallery -->
<!-- id : gallery -->
<!-- ********** -->

<ptplugin name="gallery" engine="kolorBox">
	<settings>
		<option name="position" value="center" type="string" />
		<option name="margin_x" value="0" type="int" />
		<option name="margin_y" value="0" type="int" />
		<option name="external_padding" value="1" type="int" />
		<option name="draggable_box" value="false" type="bool" />
		<option name="slideshow_autoplay" value="false" type="bool" />
		<option name="slideshow" value="5000" type="int" />
		<option name="container_auto_size" value="true" type="bool" />
		<option name="container_width" value="100" type="int" />
		<option name="container_width_unit" value="percent" type="string" />
		<option name="container_height" value="100" type="int" />
		<option name="container_height_unit" value="percent" type="string" />
		<option name="container_color" value="ffffff" type="string" />
		<option name="container_alpha" value="0.80000000000000004" type="float" />
		<option name="container_topleft_border_radius" value="15" type="int" />
		<option name="container_topright_border_radius" value="15" type="int" />
		<option name="container_bottomleft_border_radius" value="15" type="int" />
		<option name="container_bottomright_border_radius" value="15" type="int" />
		<option name="container_border_width" value="0" type="int" />
		<option name="container_border_color" value="ffffff" type="string" />
		<option name="container_border_alpha" value="1" type="float" />
		<option name="overlay_displayed" value="false" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.50000762951094835" type="float" />

		<option name="overlay_image" value="housedata/graphics/gallery/_dsc0231.jpg" type="string" />

		<option name="item_border_width" value="0" type="int" />
		<option name="item_border_color" value="ffffff" type="string" />
		<option name="item_border_alpha" value="1" type="float" />
		
		<option name="title_displayed" value="false" type="bool" />
		
		<option name="caption_displayed" value="false" type="bool" />
		
		<option name="play_displayed" value="true" type="bool" />
		<option name="play_position" value="bottomleft" type="string" />
		<option name="play_text" value="galleryplay_text" type="string" />




		<option name="navigation_displayed" value="true" type="bool" />
		<option name="navigation_position" value="bottom" type="string" />
		<option name="counter_color" value="666666" type="string" />
		<option name="navprev_text" value="gallerynavprev_text" type="string" />
		<option name="navnext_text" value="gallerynavnext_text" type="string" />




		<option name="navigation_arrows" value="true" type="bool" />




		<option name="fullscreen_displayed" value="false" type="bool" />
		<option name="fullscreen_position" value="topleft" type="string" />
		<option name="fullscreen_text" value="galleryfullscreen_text" type="string" />




		<option name="close_displayed" value="true" type="bool" />
		<option name="close_position" value="topright" type="string" />
		<option name="close_text" value="galleryclose_text" type="string" />

		<option name="close_callback" value="invokeKrFunction('closeKolorBoxCallback_gallery')" type="string" />
		<option name="zorder" value="3" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
	<internaldata>
		<item name="item_1" title="gallerypicture_title0" caption="gallerypicture_caption0" value="housedata/graphics/gallery/_dsc0231.jpg"/>
		<item name="item_2" title="gallerypicture_title1" caption="gallerypicture_caption1" value="housedata/graphics/gallery/_dsc0232.jpg"/>
	</internaldata>
</ptplugin>

<action name="kolorBoxJsReady_gallery">
	set(ptplugin[gallery].jsready, true);
</action>

<action name="showGallery_gallery">
	ifnot(ptplugin[gallery].isOpen,
		set(ptplugin[gallery].isOpen, true);
		set(ptplugin[gallery].doNotDeleteMe, false);
		set(gallery_boxurl, %1);
		pauseautorotation(forceplugin);

		js(invokePluginFunction(gallery, openKolorBox, %1));
		events.dispatch(onremovedisplayedobject);
	,
		if(%1 !== null AND %1 != gallery_boxurl,
			closeKolorBox_gallery();
			delayedcall(0.3,showGallery_gallery(%1););
		);
	);
</action>

<action name="toggleGallery_gallery">
	js(invokePluginFunction(gallery, toggleKolorBox, %1));
</action>


<action name="closeKolorBox_gallery">
	js(invokePluginFunction(gallery, closeKolorBox));
</action>

<action name="closeKolorBoxCallback_gallery">
	resumeautorotation(forceplugin);

	set(ptplugin[gallery].isOpen, false);
</action>

<action name="changeLanguage_gallery">
	if(ptplugin[gallery].jsready,
		js(invokePluginFunction(gallery, changeLanguage));
	,
		delayedcall(delay_gallery, 0.1, changeLanguage_gallery(););
	);
</action>

<events name="kolorBoxEvents_gallery" 
	keep="true"
	changetourlanguage="changeLanguage_gallery();"
	/>

<!-- ********** -->
<!-- Mobile-Circles Control Bar -->
<!-- id : mobileCirclesControlBar -->
<!-- ********** -->

  <krpano mobileCirclesControlBarbarbuilt="false" mobileCirclesControlBarbackgroundwidthwhenclosed="0" mobileCirclesControlBarbackgroundwidthwhenopened="0" mobileCirclesControlBarIsOpened="false" />
  <events name="mobileCirclesControlBarevents" 
    onxmlcomplete="mobileCirclesControlBarbuildMenuBar();" 


    keep="true" />



  <action name="mobileCirclesControlBarbuildMenuBar">
    ifnot (mobileCirclesControlBarbarbuilt, mobileCirclesControlBarbuildMenu(); set(mobileCirclesControlBarbarbuilt, true););
  </action>

  <style name="mobileCirclesControlBar_btn_style"
         keep="true"
         edge="right"
         align="right"
         x="0" y="0"
         width="40" height="40"
         crop="0|0|60|60"
         onovercrop="0|60|60|60"
         ondowncrop="0|120|60|60"
         onhover="showTooltip('plugin', mobileCirclesControlBarmenuTooltipStyle, bottom);"
         onout="hideTooltip();"
         />
  <style name="mobileCirclesControlBar_btn_style_off"
         keep="true"
         edge="right"
         align="right"
         x="0" y="0"
         width="40" height="40"
         onhover="showTooltip('plugin', mobileCirclesControlBarmenuTooltipStyle, bottom);"
         onout="hideTooltip();"
         />

  <layer name="mobileCirclesControlBar_menu_bg"
         keep="true"
         type="container"
         zorder="4"
         width="40"
         height="40"
         align="bottom"
         x="0" y="30"
         maskchildren="true"
         rotate="0"
         visible="false"
         >

    <layer name="mobileCirclesControlBarbtn_gyroscope_off"
            url="%FIRSTXML%/graphics/mobile-circlescontrolbar/btn_gyroscope.png"
            style="mobileCirclesControlBar_btn_style"
            onclick="disableGyroscope();
"
            devices="html5"
            tooltip="mobileCirclesControlBargyroOffTip"
            visible="false"
            />
    <layer name="mobileCirclesControlBarbtn_gyroscope_on"
            url="%FIRSTXML%/graphics/mobile-circlescontrolbar/btn_gyroscope.png"
            style="mobileCirclesControlBar_btn_style"
            onclick="enableGyroscope();
"
            devices="html5"
            tooltip="mobileCirclesControlBargyroOnTip"
            visible="false"
            />
    <layer name="mobileCirclesControlBarbtn_gyroscope_not"
            url="%FIRSTXML%/graphics/mobile-circlescontrolbar/btn_gyroscope_off.png"
            style="mobileCirclesControlBar_btn_style_off"
            enabled="true"
            capture="false"
            devices="html5"
            tooltip="mobileCirclesControlBargyroNotTip"
            visible="false"
            />

    <layer name="mobileCirclesControlBarbtn_enter_vr"
            url="%FIRSTXML%/graphics/mobile-circlescontrolbar/btn_vr_mode.png"
            style="mobileCirclesControlBar_btn_style"
            onclick="if(scene[get(xml.scene)].full360,
    js(accessWebVr(get(xml.scene),get(tour_language)));
,
    js(accessWebVr(null,get(tour_language)));
);"
            tooltip="mobileCirclesControlBarenterVRTip"
            visible="false"
            devices="html5"
            />
    <layer name="mobileCirclesControlBarbtn_enter_vr_not"
            url="%FIRSTXML%/graphics/mobile-circlescontrolbar/btn_vr_mode_off.png"
            style="mobileCirclesControlBar_btn_style"
            tooltip="mobileCirclesControlBarenterVRNotTip"
            enabled="true"
            capture="false"
            visible="false"
            devices="html5"
            />

    <layer name="mobileCirclesControlBarbtn_ctrlmode_move_to"
            url="%FIRSTXML%/graphics/mobile-circlescontrolbar/btn_move_to.png"
            style="mobileCirclesControlBar_btn_style"
            tooltip="mobileCirclesControlBarctrlmodeMoveTip"
            onclick="setControlModeMoveTo();
"
            visible="false"
            devices="desktop"
            />
    <layer name="mobileCirclesControlBarbtn_ctrlmode_drag_to"
            url="%FIRSTXML%/graphics/mobile-circlescontrolbar/btn_drag_to.png"
            style="mobileCirclesControlBar_btn_style"
            tooltip="mobileCirclesControlBarctrlmodeDragTip"
            onclick="setControlModeDragTo();
"
            visible="false"
            devices="desktop"
            />

    <layer name="mobileCirclesControlBarbtn_home"
           url="%FIRSTXML%/graphics/mobile-circlescontrolbar/btn_home.png"
           style="mobileCirclesControlBar_btn_style"
           onclick="mobileCirclesControlBarbtn_home_action();"
           visible="false"
           tooltip="mobileCirclesControlBarhomeTip"
           />




    <layer name="mobileCirclesControlBarbtn_display_floorplan"
            url="%FIRSTXML%/graphics/mobile-circlescontrolbar/btn_floorplan.png"
            onclick="showFloorplan();
"
            style="mobileCirclesControlBar_btn_style"
            visible="false"
            tooltip="mobileCirclesControlBardisplayFloorplanTip"
            />
    <layer name="mobileCirclesControlBarbtn_hide_floorplan"
            url="%FIRSTXML%/graphics/mobile-circlescontrolbar/btn_floorplan.png"
            onclick="hideFloorplan();
"
            style="mobileCirclesControlBar_btn_style"
            visible="false"
            tooltip="mobileCirclesControlBarhideFloorplanTip"
            />

    <layer name="mobileCirclesControlBarbtn_share"
            url="%FIRSTXML%/graphics/mobile-circlescontrolbar/btn_share.png"
            onclick="shareTour();
"
            style="mobileCirclesControlBar_btn_style"
            visible="false"
            tooltip="mobileCirclesControlBarshareTip"
            />


    <layer name="mobileCirclesControlBarbtn_openfs"
            url="%FIRSTXML%/graphics/mobile-circlescontrolbar/btn_enter_fs.png"
            onclick="enterFullscreen();
"
            style="mobileCirclesControlBar_btn_style"
            visible="false"
            devices="fullscreensupport"
            tooltip="mobileCirclesControlBaropenFsTip"
            />
    <layer name="mobileCirclesControlBarbtn_closefs"
            url="%FIRSTXML%/graphics/mobile-circlescontrolbar/btn_close_fs.png"
            onclick="exitFullscreen();
"
            style="mobileCirclesControlBar_btn_style"
            visible="false"
            devices="fullscreensupport"
            tooltip="mobileCirclesControlBarcloseFsTip"
            />



    <layer name="mobileCirclesControlBarbtn_display_help"
            url="%FIRSTXML%/graphics/mobile-circlescontrolbar/btn_help.png"
            onclick="mobileCirclesControlBardisplayHelp();"
            style="mobileCirclesControlBar_btn_style"
            devices="desktop"
            visible="false"
            tooltip="mobileCirclesControlBardisplayHelpTip"
            />
    <layer name="mobileCirclesControlBarbtn_close_help"
            url="%FIRSTXML%/graphics/mobile-circlescontrolbar/btn_help.png"
            onclick="mobileCirclesControlBarcloseHelp();"
            style="mobileCirclesControlBar_btn_style"
            visible="false"
            devices="desktop"
            tooltip="mobileCirclesControlBarhideHelpTip"
            />



    <layer name="mobileCirclesControlBarbtn_hidecontrols"
           url="%FIRSTXML%/graphics/mobile-circlescontrolbar/btn_hide_controls.png"
           style="mobileCirclesControlBar_btn_style"
           onclick="hideTourControls();
"
           visible="false"
           tooltip="mobileCirclesControlBarhideControlsTip"
           />
    <layer name="mobileCirclesControlBarbtn_showcontrols"
           url="%FIRSTXML%/graphics/mobile-circlescontrolbar/btn_show_controls.png"
           style="mobileCirclesControlBar_btn_style"
           onclick="showTourControls();
"
           tooltip="mobileCirclesControlBardisplayControlsTip"
           visible="false"
           />
 </layer>

    <action name="mobileCirclesControlBarbtn_home_action">
      mainloadscene(pano37);
    </action>


<events name="mobileCirclesControlBarvravailableevent"
		onvravailable="mobileCirclesControlBarupdateVrButtonsAvailability();"
		onvrunavailable="mobileCirclesControlBarupdateVrButtonsAvailability();"
		keep="true" devices="html5" />
	<krpano mobileCirclesControlBarmenuvravailable="false" />
	<action name="mobileCirclesControlBarupdateVrButtonsAvailability">
		if (tour_vrdevices,
			set(mobileCirclesControlBarmenuvravailable, true);
		,
			set(mobileCirclesControlBarmenuvravailable, false);
		);
		mobileCirclesControlBarupdateVrButtons();
	</action>
	<action name="mobileCirclesControlBarHideVrButtons">
		set(layer[mobileCirclesControlBarbtn_enter_vr].visible, false);
		if('%1' == 'true' AND plugin[ptpvrmode],
			set(layer[mobileCirclesControlBarbtn_enter_vr_not].visible, true);
		,
			set(layer[mobileCirclesControlBarbtn_enter_vr_not].visible, false);
		);
	</action>
	<action name="mobileCirclesControlBarShowVrButtons">
		if (mobileCirclesControlBarmenuvravailable,
			set(layer[mobileCirclesControlBarbtn_enter_vr].visible, true);
			set(layer[mobileCirclesControlBarbtn_enter_vr_not].visible, false);
		,
			mobileCirclesControlBarHideVrButtons(true);
		);
	</action>
	<action name="mobileCirclesControlBarupdateVrButtons">
	if (tour_vrdevices,
		if (tour_displaycontrols,
			mobileCirclesControlBarShowVrButtons();
		,
			mobileCirclesControlBarHideVrButtons();
		);
	,
		if (tour_displaycontrols,
			mobileCirclesControlBarHideVrButtons(true);
		,
			mobileCirclesControlBarHideVrButtons();
		);
	);
	</action>

  <events name="mobileCirclesControlBargyroscopeavailableevent"
          ongyroscopeavailable="mobileCirclesControlBarupdateGyroscopeButtonsAvailability();"
          ongyroscopeunavailable="mobileCirclesControlBarupdateGyroscopeButtonsAvailability();"
          ongyroscopeon="mobileCirclesControlBarenableGyroscopeButtons(true);"
          ongyroscopeoff="mobileCirclesControlBarenableGyroscopeButtons(false);"
          keep="true" devices="html5" />
  <krpano mobileCirclesControlBarmenugyroscopeavailable="false" mobileCirclesControlBarmenugyroscopeenabled="false"/>
  <action name="mobileCirclesControlBarupdateGyroscopeButtonsAvailability">
    if (tour_gyroscopedevices,
      set(mobileCirclesControlBarmenugyroscopeavailable, true);
      mobileCirclesControlBarupdateGyroscopeButtons();
    ,
      set(mobileCirclesControlBarmenugyroscopeavailable, false);
      mobileCirclesControlBarupdateGyroscopeButtons();
    );
  </action>
  <action name="mobileCirclesControlBarenableGyroscopeButtons">
    if (tour_gyroscopedevices,
      set(mobileCirclesControlBarmenugyroscopeenabled, %1);
      mobileCirclesControlBarupdateGyroscopeButtons();
    );
  </action>
	<action name="mobileCirclesControlBarHideGyroscopeButtons">
		set(layer[mobileCirclesControlBarbtn_gyroscope_off].visible, false);
		set(layer[mobileCirclesControlBarbtn_gyroscope_on].visible, false);
		if('%1' == 'true' AND plugin[gyroscope],
			set(layer[mobileCirclesControlBarbtn_gyroscope_not].visible, true);
		,
			set(layer[mobileCirclesControlBarbtn_gyroscope_not].visible, false);
		);
	</action>
	<action name="mobileCirclesControlBarShowGyroscopeButtons">
		if (mobileCirclesControlBarmenugyroscopeavailable,
			if (mobileCirclesControlBarmenugyroscopeenabled,
				set(layer[mobileCirclesControlBarbtn_gyroscope_off].visible, true);
				set(layer[mobileCirclesControlBarbtn_gyroscope_on].visible, false);
			,
				set(layer[mobileCirclesControlBarbtn_gyroscope_off].visible, false);
				set(layer[mobileCirclesControlBarbtn_gyroscope_on].visible, true);
			);
			set(layer[mobileCirclesControlBarbtn_gyroscope_not].visible, false);
		,
			mobileCirclesControlBarHideGyroscopeButtons(true);
		);
	</action>
	<action name="mobileCirclesControlBarupdateGyroscopeButtons">
	if (tour_gyroscopedevices,
		if (tour_displaycontrols,
			mobileCirclesControlBarShowGyroscopeButtons();
		,
			mobileCirclesControlBarHideGyroscopeButtons();
		);
	,
		if (tour_displaycontrols,
			mobileCirclesControlBarHideGyroscopeButtons(true);
		,
			mobileCirclesControlBarHideGyroscopeButtons();
		);
	);
	</action>


	<events name="mobileCirclesControlBarcontrolmodechangedevent" 
		oncontrolmodechanged="mobileCirclesControlBarupdateControlModeButtons();" 
		keep="true" />
	<action name="mobileCirclesControlBarHideControlModeButtons">
		set(layer[mobileCirclesControlBarbtn_ctrlmode_move_to].visible, false);
		set(layer[mobileCirclesControlBarbtn_ctrlmode_drag_to].visible, false);
	</action>
	<action name="mobileCirclesControlBarShowControlModeButtons">
		if (tour_controlmodemousetype == "moveto",
			set(layer[mobileCirclesControlBarbtn_ctrlmode_drag_to].visible, true);
			set(layer[mobileCirclesControlBarbtn_ctrlmode_move_to].visible, false);
		,
			set(layer[mobileCirclesControlBarbtn_ctrlmode_move_to].visible, true);
			set(layer[mobileCirclesControlBarbtn_ctrlmode_drag_to].visible, false);
		);
	</action>
	<action name="mobileCirclesControlBarupdateControlModeButtons">
	if (device.desktop,
		if (tour_displaycontrols,
			mobileCirclesControlBarShowControlModeButtons();
		,
			mobileCirclesControlBarHideControlModeButtons();
		);
	,
		mobileCirclesControlBarHideControlModeButtons();
	);
	</action>

	<events name="mobileCirclesControlBarhideshowcontrolsevent" 
		hidetourcontrols="mobileCirclesControlBarhideMenuControls();" 
		showtourcontrols="mobileCirclesControlBarshowMenuControls();" 
		keep="true" />

  <action name="mobileCirclesControlBarhideMenuControls">
    set(mobileCirclesControlBarIsOpened, false);
    set(layer[mobileCirclesControlBarbtn_hidecontrols].visible, false);
    set(layer[mobileCirclesControlBarbtn_showcontrols].visible, true);

set(layer[mobileCirclesControlBarbtn_share].visible, false);

set(layer[mobileCirclesControlBarbtn_home].visible, false);
	mobileCirclesControlBarupdateFullscreenButtons();
	mobileCirclesControlBarupdateHelpButtons();



	mobileCirclesControlBarupdateGyroscopeButtons();

	mobileCirclesControlBarupdateControlModeButtons();

	mobileCirclesControlBarupdateFloorplanButtons();
	mobileCirclesControlBarupdateVrButtons();



	set(layer[mobileCirclesControlBar_menu_bg].width, get(mobileCirclesControlBarbackgroundwidthwhenclosed));

	set(layer[mobileCirclesControlBar_menu_bg].visible, true);
  </action>
  <action name="mobileCirclesControlBarshowMenuControls">
    set(mobileCirclesControlBarIsOpened, true);
    set(layer[mobileCirclesControlBarbtn_hidecontrols].visible, true);
    set(layer[mobileCirclesControlBarbtn_showcontrols].visible, false);
	set(layer[mobileCirclesControlBar_menu_bg].visible, true);

set(layer[mobileCirclesControlBarbtn_share].visible, true);

set(layer[mobileCirclesControlBarbtn_home].visible, true);
	mobileCirclesControlBarupdateFullscreenButtons();
	mobileCirclesControlBarupdateHelpButtons();



	mobileCirclesControlBarupdateGyroscopeButtons();
	mobileCirclesControlBarupdateVrButtons();

	mobileCirclesControlBarupdateControlModeButtons();

	mobileCirclesControlBarupdateFloorplanButtons();


    set(layer[mobileCirclesControlBar_menu_bg].width, get(mobileCirclesControlBarbackgroundwidthwhenopened));
  </action>

  <layer name="mobileCirclesControlBarhelpScreenBg"
         align="center"
         keep="true"
         onclick="mobileCirclesControlBarcloseHelp();"
         url="%FIRSTXML%/graphics/mobile-circlescontrolbar/help_screen_bg.png"
         visible="false"
         rotate="-90"
         height="50%"
         width="prop"
         zorder="97"
         x="100%" />
  <layer name="mobileCirclesControlBarhelpScreenFg"
         align="center"
         keep="true"
         onclick="mobileCirclesControlBarcloseHelp();"
         url="%FIRSTXML%/graphics/mobile-circlescontrolbar/help_screen_fg.png"
         height="50%"
         width="prop"
         visible="false"
         rotate="90"
         zorder="98"
         x="-100%"
         displayed="false" />
  <action name="mobileCirclesControlBardisplayHelp">
  if (device.desktop,
    set(layer[mobileCirclesControlBarhelpScreenFg].displayed,true);
    set(layer[mobileCirclesControlBarhelpScreenBg].visible,true);
    set(layer[mobileCirclesControlBarhelpScreenFg].visible,true);
    tween(layer[mobileCirclesControlBarhelpScreenFg].rotate,0, 1);
    tween(layer[mobileCirclesControlBarhelpScreenFg].x,0, 1);
    tween(layer[mobileCirclesControlBarhelpScreenBg].rotate,0, 1);
    tween(layer[mobileCirclesControlBarhelpScreenBg].x,0, 1);
    mobileCirclesControlBarupdateHelpButtons();
  );
  </action>
  <action name="mobileCirclesControlBarcloseHelp">
  if (device.desktop,
    set(layer[mobileCirclesControlBarhelpScreenFg].displayed,false);
    tween(layer[mobileCirclesControlBarhelpScreenFg].rotate,  90, 1, easeOutQuad, set(layer[mobileCirclesControlBarhelpScreenFg].visible,false););
    tween(layer[mobileCirclesControlBarhelpScreenFg].x, -100%, 1);
    tween(layer[mobileCirclesControlBarhelpScreenBg].rotate, -90, 1, easeOutQuad, set(layer[mobileCirclesControlBarhelpScreenBg].visible,false););
    tween(layer[mobileCirclesControlBarhelpScreenBg].x, 100%, 1);
    mobileCirclesControlBarupdateHelpButtons();
  );
  </action>
	<action name="mobileCirclesControlBarHideHelpButtons">
		set(layer[mobileCirclesControlBarbtn_display_help].visible, false);
		set(layer[mobileCirclesControlBarbtn_close_help].visible, false);
	</action>
	<action name="mobileCirclesControlBarShowHelpButtons">
		if (layer[mobileCirclesControlBarhelpScreenFg].displayed,
			set(layer[mobileCirclesControlBarbtn_close_help].visible, true);
			set(layer[mobileCirclesControlBarbtn_display_help].visible, false);
		,
			set(layer[mobileCirclesControlBarbtn_display_help].visible, true);
			set(layer[mobileCirclesControlBarbtn_close_help].visible, false);
		);
	</action>
	<action name="mobileCirclesControlBarupdateHelpButtons">
	if (device.desktop,
		if (tour_displaycontrols,
			mobileCirclesControlBarShowHelpButtons();
		,
			mobileCirclesControlBarHideHelpButtons();
		);
	,
		mobileCirclesControlBarHideHelpButtons();
	);
	</action>


	<events name="mobileCirclesControlBarDisplayFloorPlanEvents" 
		onshowtourfloorplan="mobileCirclesControlBarupdateFloorplanButtons();" 
		onhidetourfloorplan="mobileCirclesControlBarupdateFloorplanButtons();" 
		keep="true" />
	<action name="mobileCirclesControlBarHideFloorplanButtons">
		set(layer[mobileCirclesControlBarbtn_display_floorplan].visible, false);
		set(layer[mobileCirclesControlBarbtn_hide_floorplan].visible, false);
	</action>
	<action name="mobileCirclesControlBarShowFloorplanButtons">
		if (tour_displayfloorplan,
			set(layer[mobileCirclesControlBarbtn_hide_floorplan].visible, true);
			set(layer[mobileCirclesControlBarbtn_display_floorplan].visible, false);
		,
			set(layer[mobileCirclesControlBarbtn_display_floorplan].visible, true);
			set(layer[mobileCirclesControlBarbtn_hide_floorplan].visible, false);
		);
	</action>
	<action name="mobileCirclesControlBarupdateFloorplanButtons">
		if (tour_displaycontrols,
			mobileCirclesControlBarShowFloorplanButtons();
		,
			mobileCirclesControlBarHideFloorplanButtons();
		);
	</action>



  <events name="mobileCirclesControlBarmenufullscreenchangeevent"
          onenterfullscreen="mobileCirclesControlBarupdateFullscreenButtons();"
          onexitfullscreen="mobileCirclesControlBarupdateFullscreenButtons();"
          keep="true"/>
	<action name="mobileCirclesControlBarHideFullscreenButtons">
		set(layer[mobileCirclesControlBarbtn_openfs].visible , false);
		set(layer[mobileCirclesControlBarbtn_closefs].visible, false);
	</action>
	<action name="mobileCirclesControlBarShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[mobileCirclesControlBarbtn_openfs].visible , false);
				set(layer[mobileCirclesControlBarbtn_closefs].visible, true);
			,
				set(layer[mobileCirclesControlBarbtn_openfs].visible ,true);
				set(layer[mobileCirclesControlBarbtn_closefs].visible,false);
			);
		,
			mobileCirclesControlBarHideFullscreenButtons();
		);
	</action>
	<action name="mobileCirclesControlBarupdateFullscreenButtons">
		if (tour_displaycontrols,
			mobileCirclesControlBarShowFullscreenButtons();
		,
			mobileCirclesControlBarHideFullscreenButtons();
		);
	</action>



<layer name="mobileCirclesControlBarmenuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	background="false"
	border="false"
	css="color:#000000;font-family:Helvetica;font-weight:bold;font-size:14px;text-align:left;"
	height="20"
	autoheight="true"
	autowidth="auto"
	xoffset="0"
	yoffset="0"
	padding="2"
	selectable="false"
	zorder="0"
	visible="false"
	html=""
	edge="bottom"
/>
  <action name="mobileCirclesControlBarbuildMenu">
    
    set(mobileCirclesControlBarbutton_pos, 0);

	set(mobileCirclesControlBarbackgroundwidthwhenclosed, 40);
    set(layer[mobileCirclesControlBarbtn_hidecontrols].x, get(mobileCirclesControlBarbutton_pos));
    set(layer[mobileCirclesControlBarbtn_showcontrols].x, get(mobileCirclesControlBarbutton_pos));
    inc(mobileCirclesControlBarbutton_pos, 45);



      if (device.desktop,
        set(layer[mobileCirclesControlBarbtn_display_help].x, get(mobileCirclesControlBarbutton_pos));
        set(layer[mobileCirclesControlBarbtn_close_help].x  , get(mobileCirclesControlBarbutton_pos));
        inc(mobileCirclesControlBarbutton_pos, 45);
      );

      if (device.fullscreensupport,
        set(layer[mobileCirclesControlBarbtn_openfs].x , get(mobileCirclesControlBarbutton_pos));
        set(layer[mobileCirclesControlBarbtn_closefs].x, get(mobileCirclesControlBarbutton_pos));
        inc(mobileCirclesControlBarbutton_pos, 45);
      );


      set(layer[mobileCirclesControlBarbtn_share].x, get(mobileCirclesControlBarbutton_pos));
      inc(mobileCirclesControlBarbutton_pos, 45);

      set(layer[mobileCirclesControlBarbtn_display_floorplan].x , get(mobileCirclesControlBarbutton_pos));
      set(layer[mobileCirclesControlBarbtn_hide_floorplan].x    , get(mobileCirclesControlBarbutton_pos));
      inc(mobileCirclesControlBarbutton_pos, 45);




    if (device.desktop,
      set(layer[mobileCirclesControlBarbtn_ctrlmode_drag_to].x, get(mobileCirclesControlBarbutton_pos));
      set(layer[mobileCirclesControlBarbtn_ctrlmode_move_to].x, get(mobileCirclesControlBarbutton_pos));
      inc(mobileCirclesControlBarbutton_pos, 45);
    );


    if(plugin[ptpvrmode] AND device.html5,
      set(layer[mobileCirclesControlBarbtn_enter_vr].x, get(mobileCirclesControlBarbutton_pos));
      set(layer[mobileCirclesControlBarbtn_enter_vr_not].x, get(mobileCirclesControlBarbutton_pos));
      inc(mobileCirclesControlBarbutton_pos, 45);
    );


      if(plugin[gyroscope],
        set(mobileCirclesControlBarDisplayGyroscopeButton, false);
        if (device.tablet, set(mobileCirclesControlBarDisplayGyroscopeButton, true););
        if (device.mobile, set(mobileCirclesControlBarDisplayGyroscopeButton, true););
        if(mobileCirclesControlBarDisplayGyroscopeButton,
          set(layer[mobileCirclesControlBarbtn_gyroscope_on].x , get(mobileCirclesControlBarbutton_pos));
          set(layer[mobileCirclesControlBarbtn_gyroscope_off].x, get(mobileCirclesControlBarbutton_pos));
          set(layer[mobileCirclesControlBarbtn_gyroscope_not].x, get(mobileCirclesControlBarbutton_pos));
          inc(mobileCirclesControlBarbutton_pos, 45);
        );
      );


        set(layer[mobileCirclesControlBarbtn_home].x, get(mobileCirclesControlBarbutton_pos));
        inc(mobileCirclesControlBarbutton_pos, 45);



      dec(mobileCirclesControlBarbutton_pos, 5);

      set(mobileCirclesControlBarbackgroundwidthwhenopened, get(mobileCirclesControlBarbutton_pos));


    
      set(layer[mobileCirclesControlBar_menu_bg].width, get(mobileCirclesControlBarbackgroundwidthwhenopened));
	
	
	
    </action>

	<events name="mobileCirclesControlBarStartTourEvents" devices="desktop|mobile" onTourStart="mobileCirclesControlBarCallOnStartTour();" keep="true" />
	
	<action name="mobileCirclesControlBarCallOnStartTour">
		
		showTourControls();

	</action>



<!-- ********** -->
<!-- Social Share -->
<!-- id : socialShare -->
<!-- ********** -->

<ptplugin name="socialShare" engine="kolorBox">
	<settings>
		<option name="position" value="bottom" type="string" />
		<option name="margin_x" value="50" type="int" />
		<option name="margin_y" value="50" type="int" />
		<option name="external_padding" value="15" type="int" />
		<option name="animate" value="false" type="bool" />
		<option name="draggable_box" value="false" type="bool" />
		<option name="container_auto_size" value="true" type="bool" />
		<option name="container_color" value="ffffff" type="string" />
		<option name="container_alpha" value="0" type="float" />
		<option name="container_topleft_border_radius" value="15" type="int" />
		<option name="container_topright_border_radius" value="15" type="int" />
		<option name="container_bottomleft_border_radius" value="15" type="int" />
		<option name="container_bottomright_border_radius" value="15" type="int" />
		<option name="container_border_width" value="0" type="int" />
		<option name="container_border_color" value="ffffff" type="string" />
		<option name="container_border_alpha" value="0" type="float" />
		<option name="overlay_displayed" value="false" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.50000762951094835" type="float" />

		<option name="social_btn" value="facebook#twitter#google#email" type="string" />
		<option name="social_orientation" value="horizontal" type="string" />
		<option name="social_btn_size" value="64" type="int" />
		<option name="inner_margin" value="10" type="int" />
		
		
		<option name="title_displayed" value="false" type="bool" />
		<option name="caption_displayed" value="false" type="bool" />
		<option name="close_displayed" value="true" type="bool" />
		<option name="close_position" value="topright" type="string" />
		<option name="close_text" value="socialShareclose_text" type="string" />

		<option name="close_callback" value="invokeKrFunction('closeKolorBoxCallback_socialShare')" type="string" />
		<option name="zorder" value="5" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
	<internaldata>
		
	</internaldata>
</ptplugin>

<action name="kolorBoxJsReady_socialShare">
	set(ptplugin[socialShare].jsready, true);

</action>



<action name="showSocialShare_socialShare">
	ifnot(ptplugin[socialShare].isOpen,
		set(ptplugin[socialShare].isOpen, true);
		pauseautorotation(forceplugin);

			js(invokePluginFunction(socialShare, loadSingleArrayItem, social));
		events.dispatch(onremovedisplayedobject);
	);
</action>

<action name="toggleSocialShare_socialShare">
	js(invokePluginFunction(socialShare, toggleKolorBox, %1));
</action>


<action name="closeKolorBox_socialShare">
	js(invokePluginFunction(socialShare, closeKolorBox));
</action>

<action name="closeKolorBoxCallback_socialShare">
	resumeautorotation(forceplugin);

	
	set(ptplugin[socialShare].isOpen, false);
</action>

<action name="changeLanguage_socialShare">
	if(ptplugin[socialShare].jsready,
		js(invokePluginFunction(socialShare, changeLanguage));
	);
</action>

<events name="kolorBoxEvents_socialShare" devices="desktop|mobile" 
	keep="true"
	onsharetour="showSocialShare_socialShare();" 
	
	
	changetourlanguage="changeLanguage_socialShare();"
	/>

<!-- ********** -->
<!-- Social Button -->
<!-- id : socialButton -->
<!-- ********** -->

<ptplugin name="socialButton" engine="kolorSocial">
	<settings>
		<option name="position" value="topright" type="string" />
		<option name="margin_x" value="10" type="int" />
		<option name="margin_y" value="50" type="int" />
		
		<option name="source" value="facebook" type="string" />
		
		<option name="data_href" value="" type="string" />

		<option name="data_action" value="like" type="string" />
		<option name="data_appid" value="" type="string" />
		<option name="data_ref" value="" type="string" />
		<option name="data_share" value="false" type="bool" />
		<option name="data_layout" value="button" type="string" />
		<option name="zorder" value="6" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
</ptplugin>

<action name="kolorSocialJsReady_socialButton">
	set(ptplugin[socialButton].jsready, true);
</action>

<action name="showKolorSocial_socialButton">
	ifnot(ptplugin[socialButton].isOpen,
		stopdelayedcall(delay_socialButton);
		set(ptplugin[socialButton].isOpen, true);
		js(openKolorSocial(socialButton));
	,
		if(ptplugin[socialButton].jsready,
			stopdelayedcall(delay_socialButton);
			js(invokePluginFunction(socialButton, showKolorSocial));
		,
			delayedcall(delay_socialButton, 0.1, showKolorSocial_socialButton(););
		);
	);
</action>

<action name="hideKolorSocial_socialButton">
	if(ptplugin[socialButton].jsready,
		stopdelayedcall(delay_socialButton);
		js(invokePluginFunction(socialButton, hideKolorSocial));
	,
		delayedcall(delay_socialButton, 0.1, hideKolorSocial_socialButton(););
	);
</action>


<events name="kolorSocialEvents_socialButton" 
	keep="true"


	onTourStart="showKolorSocial_socialButton();"
	hidetourcontrols="hideKolorSocial_socialButton();"
	showtourcontrols="showKolorSocial_socialButton();"

/>

<!-- ********** -->
<!-- Gallery3 -->
<!-- id : gallery3 -->
<!-- ********** -->

<ptplugin name="gallery3" engine="kolorBox">
	<settings>
		<option name="position" value="center" type="string" />
		<option name="margin_x" value="0" type="int" />
		<option name="margin_y" value="0" type="int" />
		<option name="external_padding" value="15" type="int" />
		<option name="draggable_box" value="false" type="bool" />
		<option name="slideshow_autoplay" value="false" type="bool" />
		<option name="slideshow" value="5000" type="int" />
		<option name="container_auto_size" value="true" type="bool" />
		<option name="container_width" value="100" type="int" />
		<option name="container_width_unit" value="percent" type="string" />
		<option name="container_height" value="100" type="int" />
		<option name="container_height_unit" value="percent" type="string" />
		<option name="container_color" value="ffffff" type="string" />
		<option name="container_alpha" value="0.80000000000000004" type="float" />
		<option name="container_topleft_border_radius" value="15" type="int" />
		<option name="container_topright_border_radius" value="15" type="int" />
		<option name="container_bottomleft_border_radius" value="15" type="int" />
		<option name="container_bottomright_border_radius" value="15" type="int" />
		<option name="container_border_width" value="0" type="int" />
		<option name="container_border_color" value="ffffff" type="string" />
		<option name="container_border_alpha" value="1" type="float" />
		<option name="overlay_displayed" value="true" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.50000762951094835" type="float" />

		<option name="item_border_width" value="0" type="int" />
		<option name="item_border_color" value="ffffff" type="string" />
		<option name="item_border_alpha" value="1" type="float" />
		
		<option name="title_displayed" value="false" type="bool" />
		
		<option name="caption_displayed" value="false" type="bool" />
		
		<option name="play_displayed" value="true" type="bool" />
		<option name="play_position" value="bottomleft" type="string" />
		<option name="play_text" value="gallery3play_text" type="string" />




		<option name="navigation_displayed" value="true" type="bool" />
		<option name="navigation_position" value="bottom" type="string" />
		<option name="counter_color" value="666666" type="string" />
		<option name="navprev_text" value="gallery3navprev_text" type="string" />
		<option name="navnext_text" value="gallery3navnext_text" type="string" />




		<option name="navigation_arrows" value="true" type="bool" />




		<option name="fullscreen_displayed" value="false" type="bool" />
		<option name="fullscreen_position" value="topleft" type="string" />
		<option name="fullscreen_text" value="gallery3fullscreen_text" type="string" />




		<option name="close_displayed" value="true" type="bool" />
		<option name="close_position" value="topright" type="string" />
		<option name="close_text" value="gallery3close_text" type="string" />

		<option name="close_callback" value="invokeKrFunction('closeKolorBoxCallback_gallery3')" type="string" />
		<option name="zorder" value="7" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
	<internaldata>
		<item name="item_1" title="gallery3picture_title0" caption="gallery3picture_caption0" value="housedata/graphics/gallery3/_dsc0230.jpg"/>
	</internaldata>
</ptplugin>

<action name="kolorBoxJsReady_gallery3">
	set(ptplugin[gallery3].jsready, true);
</action>

<action name="showGallery_gallery3">
	ifnot(ptplugin[gallery3].isOpen,
		set(ptplugin[gallery3].isOpen, true);
		set(ptplugin[gallery3].doNotDeleteMe, false);
		set(gallery3_boxurl, %1);
		pauseautorotation(forceplugin);

		js(invokePluginFunction(gallery3, openKolorBox, %1));
		events.dispatch(onremovedisplayedobject);
	,
		if(%1 !== null AND %1 != gallery3_boxurl,
			closeKolorBox_gallery3();
			delayedcall(0.3,showGallery_gallery3(%1););
		);
	);
</action>

<action name="toggleGallery_gallery3">
	js(invokePluginFunction(gallery3, toggleKolorBox, %1));
</action>


<action name="closeKolorBox_gallery3">
	js(invokePluginFunction(gallery3, closeKolorBox));
</action>

<action name="closeKolorBoxCallback_gallery3">
	resumeautorotation(forceplugin);

	set(ptplugin[gallery3].isOpen, false);
</action>

<action name="changeLanguage_gallery3">
	if(ptplugin[gallery3].jsready,
		js(invokePluginFunction(gallery3, changeLanguage));
	,
		delayedcall(delay_gallery3, 0.1, changeLanguage_gallery3(););
	);
</action>

<events name="kolorBoxEvents_gallery3" 
	keep="true"
	changetourlanguage="changeLanguage_gallery3();"
	/>

<!-- ********** -->
<!-- Gallery4 -->
<!-- id : gallery4 -->
<!-- ********** -->

<ptplugin name="gallery4" engine="kolorBox">
	<settings>
		<option name="position" value="center" type="string" />
		<option name="margin_x" value="0" type="int" />
		<option name="margin_y" value="0" type="int" />
		<option name="external_padding" value="15" type="int" />
		<option name="draggable_box" value="false" type="bool" />
		<option name="slideshow_autoplay" value="false" type="bool" />
		<option name="slideshow" value="5000" type="int" />
		<option name="container_auto_size" value="true" type="bool" />
		<option name="container_width" value="100" type="int" />
		<option name="container_width_unit" value="percent" type="string" />
		<option name="container_height" value="100" type="int" />
		<option name="container_height_unit" value="percent" type="string" />
		<option name="container_color" value="ffffff" type="string" />
		<option name="container_alpha" value="0.80000000000000004" type="float" />
		<option name="container_topleft_border_radius" value="15" type="int" />
		<option name="container_topright_border_radius" value="15" type="int" />
		<option name="container_bottomleft_border_radius" value="15" type="int" />
		<option name="container_bottomright_border_radius" value="15" type="int" />
		<option name="container_border_width" value="0" type="int" />
		<option name="container_border_color" value="ffffff" type="string" />
		<option name="container_border_alpha" value="1" type="float" />
		<option name="overlay_displayed" value="true" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.50000762951094835" type="float" />

		<option name="item_border_width" value="0" type="int" />
		<option name="item_border_color" value="ffffff" type="string" />
		<option name="item_border_alpha" value="1" type="float" />
		
		<option name="title_displayed" value="false" type="bool" />
		
		<option name="caption_displayed" value="false" type="bool" />
		
		<option name="play_displayed" value="true" type="bool" />
		<option name="play_position" value="bottomleft" type="string" />
		<option name="play_text" value="gallery4play_text" type="string" />




		<option name="navigation_displayed" value="true" type="bool" />
		<option name="navigation_position" value="bottom" type="string" />
		<option name="counter_color" value="666666" type="string" />
		<option name="navprev_text" value="gallery4navprev_text" type="string" />
		<option name="navnext_text" value="gallery4navnext_text" type="string" />




		<option name="navigation_arrows" value="true" type="bool" />




		<option name="fullscreen_displayed" value="false" type="bool" />
		<option name="fullscreen_position" value="topleft" type="string" />
		<option name="fullscreen_text" value="gallery4fullscreen_text" type="string" />




		<option name="close_displayed" value="true" type="bool" />
		<option name="close_position" value="topright" type="string" />
		<option name="close_text" value="gallery4close_text" type="string" />

		<option name="close_callback" value="invokeKrFunction('closeKolorBoxCallback_gallery4')" type="string" />
		<option name="zorder" value="8" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
	<internaldata>
		<item name="item_1" title="gallery4picture_title0" caption="gallery4picture_caption0" value="housedata/graphics/gallery4/_2229429031292551.png"/>
		<item name="item_2" title="gallery4picture_title1" caption="gallery4picture_caption1" value="housedata/graphics/gallery4/_2925522320_20108.png"/>
	</internaldata>
</ptplugin>

<action name="kolorBoxJsReady_gallery4">
	set(ptplugin[gallery4].jsready, true);
</action>

<action name="showGallery_gallery4">
	ifnot(ptplugin[gallery4].isOpen,
		set(ptplugin[gallery4].isOpen, true);
		set(ptplugin[gallery4].doNotDeleteMe, false);
		set(gallery4_boxurl, %1);
		pauseautorotation(forceplugin);

		js(invokePluginFunction(gallery4, openKolorBox, %1));
		events.dispatch(onremovedisplayedobject);
	,
		if(%1 !== null AND %1 != gallery4_boxurl,
			closeKolorBox_gallery4();
			delayedcall(0.3,showGallery_gallery4(%1););
		);
	);
</action>

<action name="toggleGallery_gallery4">
	js(invokePluginFunction(gallery4, toggleKolorBox, %1));
</action>


<action name="closeKolorBox_gallery4">
	js(invokePluginFunction(gallery4, closeKolorBox));
</action>

<action name="closeKolorBoxCallback_gallery4">
	resumeautorotation(forceplugin);

	set(ptplugin[gallery4].isOpen, false);
</action>

<action name="changeLanguage_gallery4">
	if(ptplugin[gallery4].jsready,
		js(invokePluginFunction(gallery4, changeLanguage));
	,
		delayedcall(delay_gallery4, 0.1, changeLanguage_gallery4(););
	);
</action>

<events name="kolorBoxEvents_gallery4" 
	keep="true"
	changetourlanguage="changeLanguage_gallery4();"
	/>

<!-- ********** -->
<!-- public -->
<!-- id : gallery6 -->
<!-- ********** -->

<ptplugin name="gallery6" engine="kolorBox">
	<settings>
		<option name="position" value="center" type="string" />
		<option name="margin_x" value="0" type="int" />
		<option name="margin_y" value="0" type="int" />
		<option name="external_padding" value="15" type="int" />
		<option name="draggable_box" value="false" type="bool" />
		<option name="slideshow_autoplay" value="false" type="bool" />
		<option name="slideshow" value="5000" type="int" />
		<option name="container_auto_size" value="true" type="bool" />
		<option name="container_width" value="100" type="int" />
		<option name="container_width_unit" value="percent" type="string" />
		<option name="container_height" value="100" type="int" />
		<option name="container_height_unit" value="percent" type="string" />
		<option name="container_color" value="ffffff" type="string" />
		<option name="container_alpha" value="0.80000000000000004" type="float" />
		<option name="container_topleft_border_radius" value="15" type="int" />
		<option name="container_topright_border_radius" value="15" type="int" />
		<option name="container_bottomleft_border_radius" value="15" type="int" />
		<option name="container_bottomright_border_radius" value="15" type="int" />
		<option name="container_border_width" value="0" type="int" />
		<option name="container_border_color" value="ffffff" type="string" />
		<option name="container_border_alpha" value="1" type="float" />
		<option name="overlay_displayed" value="true" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.50000762951094835" type="float" />

		<option name="item_border_width" value="0" type="int" />
		<option name="item_border_color" value="ffffff" type="string" />
		<option name="item_border_alpha" value="1" type="float" />
		
		<option name="title_displayed" value="true" type="bool" />
		<option name="title_position" value="top" type="string" />
		<option name="title_font" value="Verdana" type="string" />
		<option name="title_size" value="14" type="int" />
		<option name="title_weight" value="bold" type="string" />
		<option name="title_style" value="normal" type="string" />
		<option name="title_decoration" value="none" type="string" />
		<option name="title_color" value="666666" type="string" />
		
		<option name="caption_displayed" value="false" type="bool" />
		
		<option name="play_displayed" value="true" type="bool" />
		<option name="play_position" value="bottomleft" type="string" />
		<option name="play_text" value="gallery6play_text" type="string" />




		<option name="navigation_displayed" value="true" type="bool" />
		<option name="navigation_position" value="bottom" type="string" />
		<option name="counter_color" value="666666" type="string" />
		<option name="navprev_text" value="gallery6navprev_text" type="string" />
		<option name="navnext_text" value="gallery6navnext_text" type="string" />




		<option name="navigation_arrows" value="true" type="bool" />




		<option name="fullscreen_displayed" value="false" type="bool" />
		<option name="fullscreen_position" value="topleft" type="string" />
		<option name="fullscreen_text" value="gallery6fullscreen_text" type="string" />




		<option name="close_displayed" value="true" type="bool" />
		<option name="close_position" value="topright" type="string" />
		<option name="close_text" value="gallery6close_text" type="string" />

		<option name="close_callback" value="invokeKrFunction('closeKolorBoxCallback_gallery6')" type="string" />
		<option name="zorder" value="9" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
	<internaldata>
		<item name="item_1" title="gallery6picture_title0" caption="gallery6picture_caption0" value="housedata/graphics/gallery6/s__41295898.jpg"/>
		<item name="item_2" title="gallery6picture_title1" caption="gallery6picture_caption1" value="housedata/graphics/gallery6/s__41295900.jpg"/>
		<item name="item_3" title="gallery6picture_title2" caption="gallery6picture_caption2" value="housedata/graphics/gallery6/s__41295902.jpg"/>
		<item name="item_4" title="gallery6picture_title3" caption="gallery6picture_caption3" value="housedata/graphics/gallery6/s__41295903.jpg"/>
		<item name="item_5" title="gallery6picture_title4" caption="gallery6picture_caption4" value="housedata/graphics/gallery6/s__41295909.jpg"/>
		<item name="item_6" title="gallery6picture_title5" caption="gallery6picture_caption5" value="housedata/graphics/gallery6/s__41295912.jpg"/>
	</internaldata>
</ptplugin>

<action name="kolorBoxJsReady_gallery6">
	set(ptplugin[gallery6].jsready, true);
</action>

<action name="showGallery_gallery6">
	ifnot(ptplugin[gallery6].isOpen,
		set(ptplugin[gallery6].isOpen, true);
		set(ptplugin[gallery6].doNotDeleteMe, false);
		set(gallery6_boxurl, %1);
		pauseautorotation(forceplugin);

		js(invokePluginFunction(gallery6, openKolorBox, %1));
		events.dispatch(onremovedisplayedobject);
	,
		if(%1 !== null AND %1 != gallery6_boxurl,
			closeKolorBox_gallery6();
			delayedcall(0.3,showGallery_gallery6(%1););
		);
	);
</action>

<action name="toggleGallery_gallery6">
	js(invokePluginFunction(gallery6, toggleKolorBox, %1));
</action>


<action name="closeKolorBox_gallery6">
	js(invokePluginFunction(gallery6, closeKolorBox));
</action>

<action name="closeKolorBoxCallback_gallery6">
	resumeautorotation(forceplugin);

	set(ptplugin[gallery6].isOpen, false);
</action>

<action name="changeLanguage_gallery6">
	if(ptplugin[gallery6].jsready,
		js(invokePluginFunction(gallery6, changeLanguage));
	,
		delayedcall(delay_gallery6, 0.1, changeLanguage_gallery6(););
	);
</action>

<events name="kolorBoxEvents_gallery6" 
	keep="true"
	changetourlanguage="changeLanguage_gallery6();"
	/>

<!-- ********** -->
<!-- Form -->
<!-- id : gallery7 -->
<!-- ********** -->

<ptplugin name="gallery7" engine="kolorBox">
	<settings>
		<option name="position" value="center" type="string" />
		<option name="margin_x" value="0" type="int" />
		<option name="margin_y" value="0" type="int" />
		<option name="external_padding" value="15" type="int" />
		<option name="draggable_box" value="false" type="bool" />
		<option name="slideshow_autoplay" value="false" type="bool" />
		<option name="slideshow" value="5000" type="int" />
		<option name="container_auto_size" value="true" type="bool" />
		<option name="container_width" value="100" type="int" />
		<option name="container_width_unit" value="percent" type="string" />
		<option name="container_height" value="100" type="int" />
		<option name="container_height_unit" value="percent" type="string" />
		<option name="container_color" value="ffffff" type="string" />
		<option name="container_alpha" value="0.80000000000000004" type="float" />
		<option name="container_topleft_border_radius" value="15" type="int" />
		<option name="container_topright_border_radius" value="15" type="int" />
		<option name="container_bottomleft_border_radius" value="15" type="int" />
		<option name="container_bottomright_border_radius" value="15" type="int" />
		<option name="container_border_width" value="0" type="int" />
		<option name="container_border_color" value="ffffff" type="string" />
		<option name="container_border_alpha" value="1" type="float" />
		<option name="overlay_displayed" value="true" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.50000762951094835" type="float" />

		<option name="item_border_width" value="0" type="int" />
		<option name="item_border_color" value="ffffff" type="string" />
		<option name="item_border_alpha" value="1" type="float" />
		
		<option name="title_displayed" value="false" type="bool" />
		
		<option name="caption_displayed" value="false" type="bool" />
		
		<option name="play_displayed" value="true" type="bool" />
		<option name="play_position" value="bottomleft" type="string" />
		<option name="play_text" value="gallery7play_text" type="string" />




		<option name="navigation_displayed" value="true" type="bool" />
		<option name="navigation_position" value="bottom" type="string" />
		<option name="counter_color" value="666666" type="string" />
		<option name="navprev_text" value="gallery7navprev_text" type="string" />
		<option name="navnext_text" value="gallery7navnext_text" type="string" />




		<option name="navigation_arrows" value="true" type="bool" />




		<option name="fullscreen_displayed" value="false" type="bool" />
		<option name="fullscreen_position" value="topleft" type="string" />
		<option name="fullscreen_text" value="gallery7fullscreen_text" type="string" />




		<option name="close_displayed" value="true" type="bool" />
		<option name="close_position" value="topright" type="string" />
		<option name="close_text" value="gallery7close_text" type="string" />

		<option name="close_callback" value="invokeKrFunction('closeKolorBoxCallback_gallery7')" type="string" />
		<option name="zorder" value="10" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
	<internaldata>
		<item name="item_1" title="gallery7picture_title0" caption="gallery7picture_caption0" value="housedata/graphics/gallery7/_26684.png"/>
	</internaldata>
</ptplugin>

<action name="kolorBoxJsReady_gallery7">
	set(ptplugin[gallery7].jsready, true);
</action>

<action name="showGallery_gallery7">
	ifnot(ptplugin[gallery7].isOpen,
		set(ptplugin[gallery7].isOpen, true);
		set(ptplugin[gallery7].doNotDeleteMe, false);
		set(gallery7_boxurl, %1);
		pauseautorotation(forceplugin);

		js(invokePluginFunction(gallery7, openKolorBox, %1));
		events.dispatch(onremovedisplayedobject);
	,
		if(%1 !== null AND %1 != gallery7_boxurl,
			closeKolorBox_gallery7();
			delayedcall(0.3,showGallery_gallery7(%1););
		);
	);
</action>

<action name="toggleGallery_gallery7">
	js(invokePluginFunction(gallery7, toggleKolorBox, %1));
</action>


<action name="closeKolorBox_gallery7">
	js(invokePluginFunction(gallery7, closeKolorBox));
</action>

<action name="closeKolorBoxCallback_gallery7">
	resumeautorotation(forceplugin);

	set(ptplugin[gallery7].isOpen, false);
</action>

<action name="changeLanguage_gallery7">
	if(ptplugin[gallery7].jsready,
		js(invokePluginFunction(gallery7, changeLanguage));
	,
		delayedcall(delay_gallery7, 0.1, changeLanguage_gallery7(););
	);
</action>

<events name="kolorBoxEvents_gallery7" 
	keep="true"
	changetourlanguage="changeLanguage_gallery7();"
	/>

  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>


	<!-- WebVR plugin for VR availability tests -->

	<plugin name="ptpvrmode" devices="html5" keep="true"
		url="%FIRSTXML%/graphics/webvr.js"
		mobilevr_support="true"
		mobilevr_fake_support="true"
		vr_cursor=""
		vr_cursor_enabled="false"
		onavailable="delayedcall(1, checkVrAvailability(););"
		onunavailable="checkVrUnavailable();"
		/>
	<action name="checkVrAvailability">
		if(plugin[ptpvrmode],
			if (plugin[ptpvrmode].isavailable,
				set(tour_vrdevices, true);
				events.dispatch(onvravailable);
			,
				set(tour_vrdevices, false);
			);
		,
			checkVrUnavailable();
		);
	</action>
	<action name="checkVrUnavailable">
		set(tour_vrdevices, false);
		events.dispatch(onvrunavailable);
	</action>
  <action name="enableGyroscope">
    changeGyroscopeState(true);
  </action>
  <action name="disableGyroscope">
    changeGyroscopeState(false);
  </action>


  <!-- Share Tour -->
  <action name="shareTour">events.dispatch(onsharetour);</action>

  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);js(setFullscreen(false));</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);js(setFullscreen(true));</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>
  <action name="enterFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,true);events.dispatch(onenterfullscreen);</action>
  <action name="exitFullScreenFallback">set(fullscreen,false);</action>
  <action name="enterFullScreenFallback">set(fullscreen,true);</action>
  
  <action name="resizeFullScreenEvent">delayedcall(0,updatescreen(););</action>

  <!-- FLOORPLAN -->
  <action name="hideFloorplan">set(tour_displayfloorplan, false);events.dispatch(onhidetourfloorplan);</action>
  <action name="showFloorplan">set(tour_displayfloorplan, true); events.dispatch(onshowtourfloorplan);</action>


  <!-- Sounds Management -->
  <plugin name="soundinterface"
          preload="true"
          url="%SWFPATH%/graphics/soundinterface.swf"
          alturl="%FIRSTXML%/graphics/soundinterface.js"
          rootpath="%$videos_sounds_path%/sounds"
          backgroundsound=""
          backgroundsoundloops="0"
          bgsound="false"
          bgsoundpaused="false"
          bgsoundloopended="false"
          volumeinitialized="false"
          started="true"
          keep="true"/>
  <events name="soundmanagementevents"
          onnewpano="if(plugin[soundinterface].started,playbackgroundsound(););"
          onxmlcomplete="soundinterfaceonxmlcomplete();"
          keep="true"/>
  <action name="soundinterfaceonxmlcomplete">
    ifnot(plugin[soundinterface].volumeinitialized,
      div(plugin[soundinterface].volume, tour_soundsvolume, 100);
      set(plugin[soundinterface].volumeinitialized,true);
    );
  </action>
  <action name="playsound3Dwhenpossible">
    set(really_play_sound, true);
    if (tour_current_played_sound,
      if (%1 == tour_current_played_sound,
        delete(tour_current_played_sound);
        set(tour_current_played_sound_state, 0);
        delete(tour_current_played_sound_paused);
        stopsound(%1);
        set(really_play_sound, false);
        if(%4,
          delete(tour_current_played_sound_pausesound);
          resumeTourSoundsActions(true,true,true,true,true);
        );
      );
    );
    if (really_play_sound,
      if (tour_current_played_sound,
        stopsound(get(tour_current_played_sound));

        ifnot(%4,
          if(tour_current_played_sound_pausesound,
            delete(tour_current_played_sound_pausesound);
            resumeTourSoundsActions(true,true,true,true,true);
          );
        );
      );
      if(%4,
        set(tour_current_played_sound_pausesound, true);
        pauseTourSoundsActions(true,false,true,true,true);
      );
      set(tour_current_played_sound, %1);
      if(tour_current_played_video,
        set(tour_current_played_sound_state, 2);
      ,
        set(tour_current_played_sound_state, 1);
      );
      set(tour_current_played_sound_paused, false);
      if (%3,
        if (device.flash,
          div(volume, tour_soundsvolume, 100);
          if(%9 != null,
            playsound3D(%1,%2,%5,%6,%7,get(volume),%8,stopsound3Dwhenpossible(%1,%4));
          ,
            playsound3D(%1,%2,%5,%6,%7,get(volume),%8);
          );
        ,
          if(%9 != null,
            playsound(%1,%2,%8,stopsound3Dwhenpossible(%1,%4));
          ,
            playsound(%1,%2,%8);
          );
        );
      ,
        if(%6 != null,
          playsound(%1,%2,%5,stopsound3Dwhenpossible(%1,%4));
        ,
          playsound(%1,%2,%5);
        );
      );

      ifnot(tour_soundson,
        set(tour_current_played_sound_paused, true);
        pausesound(%1);
      );
    );
  </action>
  <action name="stopsound3Dwhenpossible">
    if (%1 == tour_current_played_sound,
      delete(tour_current_played_sound);
      set(tour_current_played_sound_state, 0);
      delete(tour_current_played_sound_paused);

      ifnot(device.safari,
        stopsound(%1);
      );
      if(%2,
        delete(tour_current_played_sound_pausesound);
        resumeTourSoundsActions(true,true,true,true,true);
      );
    );
  </action>
  <action name="playbackgroundsound">
  if(playsound,
    if (xml.scene,
      if (scene[get(xml.scene)].backgroundsound,
        if (plugin[soundinterface].backgroundsound != scene[get(xml.scene)].backgroundsound,
          copy(plugin[soundinterface].backgroundsound, scene[get(xml.scene)].backgroundsound);
          copy(plugin[soundinterface].backgroundsoundloops, scene[get(xml.scene)].backgroundsoundloops);
          if (tour_soundson,
            set(plugin[soundinterface].bgsound, true);
            set(plugin[soundinterface].bgsoundpaused, false);
            set(plugin[soundinterface].bgsoundloopended, false);
            if(plugin[soundinterface].backgroundsoundloops GT 0,
              playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops), stopbackgroundsoundoncomplete());
            ,
              playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops));
            );
           ,
            set(plugin[soundinterface].bgsound, false);
          );
        ,
          if (tour_soundson,
            if((plugin[soundinterface].bgsoundpaused == true AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              resumesound(bgsoundname);
              set(plugin[soundinterface].bgsoundpaused, false);
            );
          ,
            set(plugin[soundinterface].bgsound, false);
          );
        );
      );
    );
  ,
    delayedcall(0.2, playbackgroundsound());
  );
  </action>
  <action name="stopbackgroundsoundoncomplete">
    if (plugin[soundinterface].backgroundsound,
    if (plugin[soundinterface].backgroundsoundloops GT 0,

      set(plugin[soundinterface].backgroundsoundloops, 0);
      set(plugin[soundinterface].bgsound, false);
      set(plugin[soundinterface].bgsoundpaused, false);
      set(plugin[soundinterface].bgsoundloopended, true);
    );
    );
  </action>
  <action name="resetbackgroundsoundifneeded">
    if (xml.scene,
      if (scene[get(xml.scene)].backgroundsound != scene[%1].backgroundsound,
        if(plugin[soundinterface].backgroundsound,
          stopsound(bgsoundname);
        );
        set(plugin[soundinterface].backgroundsound, "");
        set(plugin[soundinterface].backgroundsoundloops, 0);
        set(plugin[soundinterface].bgsound, false);
        set(plugin[soundinterface].bgsoundpaused, false);
        set(plugin[soundinterface].bgsoundloopended, false);
      );
    );
  </action>
  <action name="pausebackgroundsound">
    if(plugin[soundinterface].backgroundsound,
      if (plugin[soundinterface].bgsound,
        if(plugin[soundinterface].bgsoundpaused == false AND plugin[soundinterface].bgsoundloopended == false,
          pausesound(bgsoundname);
          set(plugin[soundinterface].bgsoundpaused, true);
        );
      );
    );
    
  </action>
  <action name="resumebackgroundsound">
    set(bgSoundOnResume, true);
    set(forceBgSoundOnResume, true);
    if(layer[displayedStandardVideo],
    if(layer[displayedStandardVideo].pausebgsound AND tour_current_played_video,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    ););
    if(layer[webvideodisplay_player],
    if(layer[webvideodisplay_player].pausebgsound AND tour_current_played_web_video,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    ););
    if(tour_current_played_sound_pausesound AND tour_current_played_sound,
      set(bgSoundOnResume, false);
    );
    ifnot(plugin[soundinterface].backgroundsound AND scene[get(xml.scene)].backgroundsound,
      set(bgSoundOnResume, false);
    );
    if(videospots_playing GT 0,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    );
    if(bgSoundOnResume,
      if (plugin[soundinterface].backgroundsound,
        if (tour_soundson,
          if (plugin[soundinterface].bgsound AND plugin[soundinterface].bgsoundloopended == false,
            if((plugin[soundinterface].bgsoundpaused == true AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              resumesound(bgsoundname);
              set(plugin[soundinterface].bgsoundpaused, false);
            );
          ,
            set(plugin[soundinterface].bgsound, true);
            set(plugin[soundinterface].bgsoundpaused, false);
            set(plugin[soundinterface].bgsoundloopended, false);
            if(plugin[soundinterface].backgroundsoundloops GT 0,
              playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops), stopbackgroundsoundoncomplete());
            ,
              playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops));
            );
          );
        );
      );
      
    ,
      if(forceBgSoundOnResume,
        playbackgroundsound();
        
      );
    );
  </action>
  <action name="preloadSounds">
  </action>

  <action name="play3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, playpanolocalsounds();););
  </action>
  <action name="stop3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, stoppanolocalsounds();););
  </action>
  <action name="resume3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, 
      set(kill3dSoundOnResume, true);
      if(layer[displayedStandardVideo],
      if(layer[displayedStandardVideo].pausebgsound,
      if(tour_current_played_video,
        set(kill3dSoundOnResume, false);
      );););
      if(layer[webvideodisplay_player],
      if(layer[webvideodisplay_player].pausebgsound,
      if(tour_current_played_web_video,
        set(kill3dSoundOnResume, false);
      );););
      if(tour_current_played_sound_pausesound,
      if(tour_current_played_sound,
        set(kill3dSoundOnResume, false);
      ););
      if(kill3dSoundOnResume,
        resumepanolocalsounds();
      );
    ););
  </action>
  <action name="pause3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, pausepanolocalsounds();););
  </action>
  <action name="set3DLocalSoundsVolume">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, setpanolocalsoundsvolume();););
  </action>
  <action name="playTourSounds">
    set(tour_soundson, true);events.dispatch(playtoursoundsevent);
    resumeTourSoundsActions(true,true,true,true,true);
  </action>
  <action name="stopTourSounds">
    set(tour_soundson, false);events.dispatch(stoptoursoundsevent);
    pauseTourSoundsActions(true,true,true,true,true);
  </action>
  <action name="setTourSoundsVolume">
    set(tour_soundsvolume, %1);events.dispatch(changetoursoundsevent);
    div(volume, tour_soundsvolume, 100);
    set(plugin[soundinterface].volume, get(volume));
    set3DLocalSoundsVolume();
  </action>
  <action name="playTourSoundsActions">
    if(%1,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
        play3DLocalSounds();
        );
      );
    );
    if(%2,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
          resumebackgroundsound();
        );
      );
    );
  </action>
  <action name="stopTourSoundsActions">
    if(%1,
      stop3DLocalSounds();
    );
    if(%2,
      stopSoundActionsSounds();
    );
    if(%3,
      stopVideoActionsSounds();
    );
    if(%4,
      pausebackgroundsound();
    );
  </action>
  <action name="resumeTourSoundsActions">
    if(%1,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
        resume3DLocalSounds();
        );
      );
    );
    if(%2,
      resumeSoundActionsSounds();
    );
    if(%3,
      resumeVideoActionsSounds();
    );
    if(%4,
      if(%5,
        if(plugin[soundinterface],
          if(plugin[soundinterface].started,
            resumebackgroundsound();
          );
        );
      ,
        pausebackgroundsound();
      );
    );
  </action>
  <action name="pauseTourSoundsActions">
    if(%1,
      pause3DLocalSounds();
    );
    if(%2,
      pauseSoundActionsSounds();
    );
    if(%3,
      pauseVideoActionsSounds();
    );
    if(%4,
      if(%5,
        pausebackgroundsound();
      ,
        if(plugin[soundinterface],
          if(plugin[soundinterface].started,
            resumebackgroundsound();
          );
        );
      );
    );
  </action>
  <action name="stopSoundActionsSounds">
    if (tour_current_played_sound,
      delete(tour_current_played_sound_paused);
      stopsound(get(tour_current_played_sound));
      delete(tour_current_played_sound);
      set(tour_current_played_sound_state, 0);
    );
  </action>
  <action name="stopVideoActionsSounds">
    if(tour_current_played_video,
      if(layer[displayedStandardVideo],
        layer[displayedStandardVideo].stop();
        removelayer(displayedStandardVideo);
        if(layer[displayedStandardVideoOverlayButton], removelayer(displayedStandardVideoOverlayButton); );
        if(layer[displayedStandardVideoOverlay], removelayer(displayedStandardVideoOverlay); );
        delete(tour_current_played_video);
        set(tour_current_played_video_state, 0);
      );
    );
    if(tour_current_played_web_video,
      displayWebVideoObjectClose();
    );
  </action>
  <action name="resumeSoundActionsSounds">
    if (tour_current_played_sound,
      set(resumeSoundActionsVerification, true);
      if(tour_current_played_video,
        if(tour_current_played_sound_state LT tour_current_played_video_state,
          set(resumeSoundActionsVerification, false);
        );
      );
      if(resumeSoundActionsVerification,
        if (tour_soundson,
          if(tour_current_played_sound_paused,
            set(tour_current_played_sound_paused, false);
            resumesound(get(tour_current_played_sound));
          );
        );
      );
    );
  </action>
  <action name="resumeVideoActionsSounds">
    if(tour_current_played_video,
      set(resumeVideoActionsVerification, true);
      if(tour_current_played_sound,
        if(tour_current_played_video_state LT tour_current_played_sound_state,
          set(resumeVideoActionsVerification, false);
        );
      );
      if(resumeVideoActionsVerification,
        if (tour_soundson,
          if(device.flash OR (device.webgl AND !device.ios),
            div(volume, tour_soundsvolume, 100);
            set(layer[displayedStandardVideo].volume, get(volume));
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.startVideosSounds(get(volume)));
            ,
              if(tour_soundsvolume GT 0,
                set(layer[displayedStandardVideo].muted, false);
              ,
                set(layer[displayedStandardVideo].muted, true);
              );
            );
          );
        ,
          if(device.flash OR (device.webgl AND !device.ios),
            set(layer[displayedStandardVideo].volume, 0);
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.stopVideosSounds());
            ,
              set(layer[displayedStandardVideo].muted, true);
            );
          );
        );
      );
    );
  </action>
  <action name="pauseSoundActionsSounds">
    if (tour_current_played_sound,
      ifnot(tour_current_played_sound_paused,
        set(tour_current_played_sound_paused, true);
        pausesound(get(tour_current_played_sound));
      );
    );
  </action>
  <action name="pauseVideoActionsSounds">
    if(tour_current_played_video,
      if(device.flash OR (device.webgl AND !device.ios),
        set(layer[displayedStandardVideo].volume, 0);
      ,
        ifnot(device.ios,
          js(kpanotour.Sounds.stopVideosSounds());
        ,
          set(layer[displayedStandardVideo].muted, true);
        );
      );
    );
  </action>

</krpano>